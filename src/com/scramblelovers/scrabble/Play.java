/*
 * @(#)Play.java    1.00 2010/08/10
 *
 * Copyright (c) 2010, Louie van Bommel
 * Use is subject to license terms of the GNU General Public License.
 * Contact Louie at <louievb@yahoo.com>
 */
package com.scramblelovers.scrabble;

/**
 * <code>Play</code> is the row, column and main word of a finished or 
 * unfinished (not yet evaluated potential) play in a Crossword game.  There are methods for:
 *    -the letters that were placed on the board
 *    -Crossplay words plus the main word
 * 
 * @author Louie van Bommel
 * @version 1.00 2010/08/10
 * @see Validator
 * @see ScrabbleController
 * @see ScrabbleModel
 */
public class Play implements Comparable<Play>{

    public static final char LOWEST_NSA_RC_LETTER = 'a';
    // On a 15 column board, this would be 'o':
    public static final char HIGHEST_NSA_RC_LETTER = (char)(LOWEST_NSA_RC_LETTER + Globals.TILES_WIDE - 1);
    public static final int LOWEST_NSA_RC_NUMBER = 1;
    public static final int HIGHEST_NSA_RC_NUMBER = Globals.TILES_HIGH;

    private int row = 1;
    private int column = 1;
    private String word = "none";
    private boolean horizontal = true;

    /**
     * Create a <code>Play</code> using NSA style to describe main word's row, column
     * 
     * @param word
     * @param locationString specifies the row and column in NSA format for documenting plays.
     * The direction is implied: horizontal starts with row, vertical starts with column
     * Rows values are 1 based, not zero based.  Examples: 
     *  Vertical plays: A1 at column 0, row 0, B15 column 1 row 14, 
     *  Horizontal plays: 12A is row 11, column 0
     * Spaces or commas are invalid.
     *  
     */

    /**
     * Create a <code>Play</code> object describing main word, using 0 based row, colum numbers
     * 
     * @param horizontal true if play is on a row, false if on a column
     * @param row the zero based row number where the main word starts (1 based)
     * @param column the zero based column number where the main word starts
     * @param word the main word of the play
     */
    public Play(boolean horizontal, int row, int column, String word) {
        this.horizontal = horizontal;
        this.row = row;
        this.column = column;
        this.word = word.toLowerCase();
    }

    public boolean isHorizontal() { return horizontal; }
    public int getRow() { return row; }
    public int getColumn() { return column; }
    public String getWord() { return word; }
    public void setWord(String word) {
        this.word = word;
    }
    public Play transpose() {
        return new Play(!this.horizontal, column, row, word);
    }

    @Override
    // generated by Eclipse v20100218 
    // this method was created to compare a Set of plays with another Set
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + column;
        result = prime * result + (horizontal ? 1231 : 1237);
        result = prime * result + row;
        result = prime * result + ((word == null) ? 0 : word.hashCode());
        return result;
    }

    @Override
    // generated by Eclipse v20100218
    // this method was created to compare a Set of plays with another Set
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            System.out.println("Play.equals(Object):failed objects of same class test");
            return false;
        }
        Play other = (Play) obj;
        if (column != other.column) {
            return false;
        }
        if (horizontal != other.horizontal) {
            return false;
        }
        if (row != other.row) {
            return false;
        }
        if (word == null) {
            if (other.word != null) {
                return false;
            }
        } else if (!word.equals(other.word)) {
            return false;
        }
        return true;
    }

    // Renames a play correctly including prefixes/suffixes already on board that you forgot to say
    public Play cleanUp(Board board, boolean mute) {
        String wd = this.getWord();
        // pre/append prefixes and suffixes
        Play play = board.getInlinePlayTo(row, column, horizontal, wd); // really 'this' Play
        // if they named a 1 letter tile placement play as horizontal when it is really vertical
        if (play.getWord().equals(wd) && play.getWord().length() == 1) {
            play = board.getInlinePlayTo(play.getRow(), play.getColumn(), !play.isHorizontal(), wd);
        }
        row = play.getRow(); column = play.getColumn(); horizontal = play.isHorizontal(); word = play.getWord();
        return play;
    }
    @Override
    public int compareTo(Play play2) {
        if (this.getRow() < play2.getRow()) return -1;
        if (this.getRow() > play2.getRow()) return +1;
        if (this.getColumn() < play2.getColumn()) return -1;
        if (this.getColumn() > play2.getColumn()) return +1;
        String w1 = this.getWord();
        String w2 = play2.getWord();
        return w1.compareTo(w2);
    }
}
